{
  "name": "atropa-server",
  "version": "0.5.2",
  "main": "./atropa-server.js",
  "description": "A simple http server for node with autoindexing and lazy module loading.",
  "keywords": [
    "server",
    "utilities",
    "atropa"
  ],
  "homepage": "https://github.com/matthewkastor/atropa-server/",
  "bugs": {
    "url": "https://github.com/matthewkastor/atropa-server/issues"
  },
  "author": {
    "name": "Matthew Kastor",
    "email": "matthewkastor@gmail.com",
    "url": "https://plus.google.com/100898583798552211130"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/matthewkastor/atropa-server.git"
  },
  "engines": {
    "node": ">=0.8.14"
  },
  "dependencies": {
    "mime": ">=1.2.9",
    "mustache": ">=0.7.2"
  },
  "bin": {
    "atropa-server": "./bin/start-server.js"
  },
  "directories": {
    "example": "examples"
  },
  "scripts": {
    "start": "node server.js"
  },
  "readme": "# Atropa Server\n\nA simple http server for node with autoindexing and lazy module loading.\n\nOverwhelmed by enterprise level server modules like Express and Flatiron?\n Me too. I don't want to read an entire dictionary and hire a team of developers\n to support my applications so, I rolled my own dead simple server. The\n main idea here is that Atropa Server will be as easy to use as just dropping\n files into a directory and requesting them in the browser. No crazy routing,\n no convoluted templating systems crammed down your throat, and absolutely no\n overarching philosophy on how your application should be structured. Just do\n whatever the hell you want without screwing around for hours re-learning how\n to do what you already know how to do.\n\nSo, you're probably wondering just how easy it is to get set up with the Atropa\n Server. Well, you just run `npm install atropa-server` and you're all set. Toss\n your HTML files in your project folder and run\n `\"node_modules/.bin/atropa-server\" 8888 .` The prompt will tell you the address\n and port your server is running on. If you've got an `index.html` file in your\n project folder then the server will find it and serve it up or, you'll see an\n absolutely beautiful listing of your project's files and directories. As an\n added bonus, this server uses the [mime module](https://npmjs.org/package/mime)\n to automatically serve files with the proper content type. See the\n documentation on the mime module for instructions on adding custom mime types.\n To specify a different port, change `8888` in the example to a different port\n number. To specify a different root directory for your webserver change the\n second parameter from `.` to an absolute path.\n\nNow I know what you're thinking, \"sure, static files are all fine and good\n but...\" Don't worry, you can have dynamically generated content and it's dead\n simple too! You just write up regular javascript files but instead of using the\n extension `js`, use `jsn`. The only requirement is that `jsn` files export a\n single function that accepts two parameters. The first parameter given\n to the function will be the `response` object, which you will use to send your\n server's response to arbitrary requests made to your `jsn` file. The second\n parameter given to the function will be the `request` object, jam packed with\n everything you'll ever want to know about the request made to your server.\n For an example of a basic `jsn` file scroll down. For details on the `request`\n object see [http://nodejs.org/api/http.html#http_http_incomingmessage](http://nodejs.org/api/http.html#http_http_incomingmessage).\n For details on the `response`object see [http://nodejs.org/api/http.html#http_class_http_serverresponse](http://nodejs.org/api/http.html#http_class_http_serverresponse).\n\n# Basic Usage\n\nSet up a node project with the simplest structure possible:\n\nNote that there is a full example project you can copy and run `npm install`,\n `npm start` on. It's in the examples folder.\n\n```\nmyProjectFolder\n  |\n  |___node_modules\n  |       |\n  |       |___atropa_server\n  |\n  |___index.html\n  |\n  |___server.js\n  |\n  |___serverSideJavaScript.jsn\n  |\n  |___package.json\n```\n\nIn index.html put whatever html content you want.\n\nIn server.js do:\n```\nvar atropaServer = require('atropa-server');\n// starting the server on port 9999\n// an optional second parameter for setting the server root\n// as an absolute path may be specified. The server root \n// defaults to `path.dirname(process.mainModule.filename)`\natropaServer.start(9999);\n```\n\nIn serverSideJavaScript.jsn do:\n```\nmodule.exports = function (response, request) {\n    // change text/plain to text/html if you're sending html\n    // change text/plain to application/json if you're sending json\n    response.writeHead(200, {'Content-Type' : 'text/plain'});\n    response.write('hello', 'utf8');\n    response.end();\n};\n```\n\nAfter that run `node server.js` and open a web browser to\n `http://localhost:9999` and whatever content you've put into index.html will\n magically appear! Navigate to `http://localhost:9999/serverSideJavaScript.jsn`\n and BANG! you'll see the wonderful wonderment of dynamically lazily loading\n your module. Go ahead and make all the `jsn` files you want and name them\n whatever you want. They'll be cached the first time they're called so they\n don't cost anything until they're needed and only cost something once! Of\n course any changes to `jsn` files will require you to restart the server if the\n changed file has been cached already.\n\n\nEnjoy!\n\n\n☭ Hial Atropa!! ☭",
  "readmeFilename": "README.md",
  "_id": "atropa-server@0.5.2",
  "dist": {
    "shasum": "027b196508b72788f002a9bbefd5d5302acce014"
  },
  "_resolved": "git+https://github.com/matthewkastor/atropa-server.git#931ccc4822cf60cbe55a58c8ee93a1497b3d93a5",
  "_from": "atropa-server@git+https://github.com/matthewkastor/atropa-server.git#master"
}
