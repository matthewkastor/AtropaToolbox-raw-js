/*jslint indent: 4, maxerr: 50, white: true, node: true, stupid: true, plusplus: true */

/**
 * @file This file contains utility functions for transforming text.
 * @author <a href="matthewkastor@gmail.com">Matthew Kastor</a>
 * @version 20121030
 * @exports convertEOL
 * @exports offsetWhiteSpace
 * @exports normalizeWhiteSpacePrefix
 * @exports getOffset
 */

'use strict';

/**
 * Converts end of line markers into whatever you want. 
 * Automatically detects any of \r\n, \n, or \r and 
 * replaces it with the user specified EOL marker.
 * @param {String} text The text you want processed.
 * @param {String} newEOL The replacement for the current EOL marks.
 * @returns {String} Returns the processed text.
 */
function convertEOL(text, newEOL) {
    return text.replace(/(\r\n|\n|\r)/g, newEOL);
}

/**
 * Removes a quantity of leading spaces specified by offset.
 * @param {String} text The text to process.
 * @param {Number} offset The amount of spaces you want removed 
 * from the beginning of the text.
 * @returns Returns the processed text.
 */
function offsetWhiteSpace(text, offset) {
    var regx;
    regx = new RegExp('^ {' + offset + '}');
    text = text.replace(regx, '');
    return text;
}

/**
 * Converts all tabs in leading whitespace into four spaces.
 * @param {String} text The text to process
 * @returns {String} Returns the processed text.
 */
function normalizeWhiteSpacePrefix(text) {
    var prefix = text.match(/^\s*/);
    if(prefix) {
        prefix = prefix[0];
        prefix = prefix.replace(/\t/g, '    ');
        text = text.replace(/^\s*/, prefix);
    }
    return text;
}

/**
 * Converts all tabs into four spaces.
 * @param {String} text The text to process
 * @returns {String} Returns the processed text.
 */
function normalizeWhiteSpace(text) {
    text = text.replace(/\t/g, '    ');
    return text;
}

/**
 * Counts the number of leading space or tab characters but not both.
 * @param {String} text The text to analyze.
 * @returns {Number} Returns the quantity of leading spaces or tabs.
 */
function getOffset(text) {
    var offset = 0,
        leadingChar = text.charAt(0);
        
    if( leadingChar === ' ' || leadingChar === '\t') {
        while(text.charAt(offset) === leadingChar && offset < text.length) {
            offset++;
        }
    }
    return offset;
}

exports.convertEOL               = convertEOL;
exports.offsetWhiteSpace         = offsetWhiteSpace;
exports.normalizeWhiteSpacePrefix= normalizeWhiteSpacePrefix;
exports.normalizeWhiteSpace      = normalizeWhiteSpace;
exports.getOffset                = getOffset;